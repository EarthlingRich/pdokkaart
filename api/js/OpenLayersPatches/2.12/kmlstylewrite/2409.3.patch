Index: lib/OpenLayers/Format/KML.js
===================================================================
--- lib/OpenLayers/Format/KML.js	(revision 10079)
+++ lib/OpenLayers/Format/KML.js	(working copy)
@@ -26,9 +26,9 @@
     
     /**
      * APIProperty: kmlns
-     * {String} KML Namespace to use. Defaults to 2.0 namespace.
+     * {String} KML Namespace to use. Defaults to 2.2 namespace.
      */
-    kmlns: "http://earth.google.com/kml/2.0",
+    kmlns: "http://www.opengis.net/kml/2.2",
     
     /** 
      * APIProperty: placemarksDesc
@@ -37,6 +37,18 @@
     placemarksDesc: "No description available",
     
     /** 
+     * APIProperty: documentsName
+     * {String} Name of the documents.  Default is "OpenLayers export".
+     */
+    documentsName: "OpenLayers export",
+
+    /**
+     * APIProperty: documentsDesc
+     * {String} Description of the documents. Default is "Exported on [date]".
+     */
+    documentsDesc: "Exported on " + new Date(),
+
+    /**
      * APIProperty: foldersName
      * {String} Name of the folders.  Default is "OpenLayers export".
      *          If set to null, no name element will be created.
@@ -384,6 +396,8 @@
                         var href = this.parseProperty(iconNode, "*", "href");
                         if (href) {                                                   
 
+                            // TBD actually w, h, x, y are deprecated in KML 2.2
+
                             var w = this.parseProperty(iconNode, "*", "w");
                             var h = this.parseProperty(iconNode, "*", "h");
 
@@ -473,6 +487,9 @@
                         }
                     }
 
+                    // TBD in KML 2.2, since "w" and "h" attributes are deprecated for
+                    // the Icon node, we should use "pointRadius" instead of "graphicWidth"
+                    // and "graphicHeight"
                     style["graphicWidth"] = width;
                     style["graphicHeight"] = height;
                     break;
@@ -984,19 +1001,52 @@
      * {String} A KML string.
      */
     write: function(features) {
+        this.styles = {};
+
         if(!(features instanceof Array)) {
             features = [features];
         }
         var kml = this.createElementNS(this.kmlns, "kml");
+        var document = this.createDocumentXML();
         var folder = this.createFolderXML();
         for(var i=0, len=features.length; i<len; ++i) {
-            folder.appendChild(this.createPlacemarkXML(features[i]));
+            var styleId = this.extractStyles ? 
+                this.createStyleNode(document, this.computedStyle(features[i])) :
+                false;
+            folder.appendChild(this.createPlacemarkXML(features[i], styleId));
         }
-        kml.appendChild(folder);
+        document.appendChild(folder);
+        kml.appendChild(document);
+
         return OpenLayers.Format.XML.prototype.write.apply(this, [kml]);
     },
 
     /**
+     * Method: createDocumentXML
+     * Creates and returns a KML document node
+     *
+     * Returns:
+     * {DOMElement}
+     */
+    createDocumentXML: function() {
+        // Document name
+        var documentName = this.createElementNS(this.kmlns, "name");
+        var documentNameText = this.createTextNode(this.documentsName);
+        documentName.appendChild(documentNameText);
+
+        // Document description
+        var documentDesc = this.createElementNS(this.kmlns, "description");
+        var documentDescText = this.createTextNode(this.documentsDesc);
+        documentDesc.appendChild(documentDescText);
+
+        var document = this.createElementNS(this.kmlns, "Document");
+        document.appendChild(documentName);
+        document.appendChild(documentDesc);
+
+        return document;
+    },
+
+    /**
      * Method: createFolderXML
      * Creates and returns a KML folder node
      * 
@@ -1032,11 +1082,12 @@
      * 
      * Parameters:
      * feature - {<OpenLayers.Feature.Vector>}
+     * styleId - {String} Optional style id to give to the placemark
      * 
      * Returns:
      * {DOMElement}
      */
-    createPlacemarkXML: function(feature) {        
+    createPlacemarkXML: function(feature, styleId) {
         // Placemark name
         var placemarkName = this.createElementNS(this.kmlns, "name");
         var name = feature.style && feature.style.label ? feature.style.label :
@@ -1056,6 +1107,12 @@
         placemarkNode.appendChild(placemarkName);
         placemarkNode.appendChild(placemarkDesc);
 
+        if (styleId) {
+            var styleNode = this.createElementNS(this.kmlns, "styleUrl");
+            styleNode.appendChild(this.createTextNode(styleId));
+            placemarkNode.appendChild(styleNode);
+        }
+
         // Geometry node (Point, LineString, etc. nodes)
         var geometryNode = this.buildGeometryNode(feature.geometry);
         placemarkNode.appendChild(geometryNode);        
@@ -1064,7 +1121,141 @@
         return placemarkNode;
     },    
 
+    computedStyle: function(feature) {
+        if (feature.style) {
+            return feature.style;
+        } else if (feature.layer) {
+            if (feature.layer.style) {
+                return feature.layer.style;
+            } else {
+                return feature.layer.styleMap.createSymbolizer(feature);
+            }
+        }
+    },
+
     /**
+     * Method: createKmlColorNode
+     *
+     * Parameters:
+     * color - {String}
+     * opacity - {Float}
+     *
+     * Returns:
+     * {DOMElement}
+     */
+    createKmlColorNode: function(color, opacity) {
+        if (opacity === undefined || opacity === null) {
+            var alpha = "ff";
+        } else {
+            var alpha = Math.round(parseFloat(opacity) * 255).toString(16);
+        }
+
+        // TBD: handle '#ccc', 'red'
+        // only match '#rrggbb'
+        var r = color.slice(1, 3);
+        var g = color.slice(3, 5);
+        var b = color.slice(5, 7);
+
+        var colorNode = this.createElementNS(this.kmlns, "color");
+
+        colorNode.appendChild(this.createTextNode(alpha + b + g + r));
+        return colorNode;
+    },
+
+    createStyleNode: function(document, style) {
+        // TBD: search if the already exists.
+        if (true) {
+            var styleNode = this.createElementNS(this.kmlns, "Style");
+            var id = OpenLayers.Util.createUniqueID("style_")
+            styleNode.setAttribute("id", id);
+
+            // LineStyle
+            if (style.strokeColor != undefined) {
+                var lineNode = this.createElementNS(this.kmlns, "LineStyle");
+                var colorNode = this.createKmlColorNode(style.strokeColor, style.strokeOpacity);
+                lineNode.appendChild(colorNode);
+
+                if (style.strokeWidth != undefined) {
+                    var width = this.createElementNS(this.kmlns, "width");
+                    width.appendChild(this.createTextNode(style.strokeWidth));
+                    lineNode.appendChild(width);
+                }
+                styleNode.appendChild(lineNode);
+            }
+
+            // PolyStyle
+            if (style.fillColor != undefined) {
+                var polyNode = this.createElementNS(this.kmlns, "PolyStyle");
+                var colorNode = this.createKmlColorNode(style.fillColor, style.fillOpacity);
+                polyNode.appendChild(colorNode);
+                styleNode.appendChild(polyNode);
+            } else if (style.fillColor == "none") {
+                var polyNode = this.createElementNS(this.kmlns, "PolyStyle");
+                var fill = this.createElementNS(this.kmlns, "fill");
+                fill.appendChild(this.createTextNode("1"));
+                polyNode.appendChild(fill);
+                styleNode.appendChild(polyNode);
+            }
+            if (polyNode && style.strokeWidth == "0") {
+                var outline = this.createElementNS(this.kmlns, "outline");
+                outline.appendChild(this.createTextNode("1"));
+                polyNode.appendChild(outline);
+                styleNode.appendChild(polyNode);
+            }
+
+            // IconStyle
+            if (style.externalGraphic != undefined && style.graphic !== false) {
+                var iconstyleNode = this.createElementNS(this.kmlns, "IconStyle");
+                var iconNode = this.createElementNS(this.kmlns, "Icon");
+
+                var href = this.createElementNS(this.kmlns, "href");
+                var urlObj = OpenLayers.Util.createUrlObject(
+                    style.externalGraphic,
+                    {ignorePort80: true}
+                );
+                url = [urlObj.protocol, '//', urlObj.host, urlObj.port, urlObj.pathname].join('');
+                href.appendChild(this.createTextNode(url));
+                iconNode.appendChild(href);
+                iconstyleNode.appendChild(iconNode);
+
+                var scaleNode = this.createElementNS(this.kmlns, "scale");
+
+                // in KML 2.2, w and h <Icon> attributes are deprecated
+                // this means that we can't modify the width/height ratio of the image
+                var scale = style.graphicWidth || style.graphicHeight || style.pointRadius * 2;
+
+                scaleNode.appendChild(this.createTextNode(scale/32));
+                iconstyleNode.appendChild(scaleNode);
+
+                // graphicOpacity, since opacity seems to be only supported using a color node in KML,
+                // which will eventually change the color of the image, we choose not
+                // to support it
+
+                // graphicXOffset and graphicYOffset (hotSpots), not supported yet
+
+                // rotation (heading), not supported yet
+
+                // graphicName, cannot be supported since nothing similar exists in KML
+
+                styleNode.appendChild(iconstyleNode);
+            }
+
+            // LabelStyle
+            if (style.fontColor != undefined) {
+                var colorNode = this.createKmlColorNode(style.fontColor, style.fontOpacity);
+                var labelStyle = this.createElementNS(this.kmlns, "LabelStyle");
+                labelStyle.appendChild(colorNode);
+                styleNode.appendChild(labelStyle);
+            }
+
+            document.appendChild(styleNode);
+            return "#" + id;
+        } else {
+            return "#" + "styleid";
+        }
+    },
+
+    /**
      * Method: buildGeometryNode
      * Builds and returns a KML geometry node with the given geometry.
      * 
Index: examples/vector-formats.html
===================================================================
--- examples/vector-formats.html	(revision 10079)
+++ examples/vector-formats.html	(working copy)
@@ -69,7 +69,7 @@
                 OpenLayers.Util.extend({}, gmlOptions),
                 out_options
             );
-            var kmlOptionsIn = OpenLayers.Util.extend(
+            var kmlOptions = OpenLayers.Util.extend(
                 {extractStyles: true}, in_options);
             formats = {
               'in': {
@@ -78,7 +78,7 @@
                 georss: new OpenLayers.Format.GeoRSS(in_options),
                 gml2: new OpenLayers.Format.GML.v2(gmlOptionsIn),
                 gml3: new OpenLayers.Format.GML.v3(gmlOptionsIn),
-                kml: new OpenLayers.Format.KML(kmlOptionsIn),
+                kml: new OpenLayers.Format.KML(kmlOptions),
                 atom: new OpenLayers.Format.Atom(in_options)
               }, 
               'out': {
@@ -87,7 +87,7 @@
                 georss: new OpenLayers.Format.GeoRSS(out_options),
                 gml2: new OpenLayers.Format.GML.v2(gmlOptionsOut),
                 gml3: new OpenLayers.Format.GML.v3(gmlOptionsOut),
-                kml: new OpenLayers.Format.KML(out_options),
+                kml: new OpenLayers.Format.KML(kmlOptions),
                 atom: new OpenLayers.Format.Atom(out_options)
               } 
             };
@@ -97,7 +97,12 @@
             var wms = new OpenLayers.Layer.WMS( "OpenLayers WMS",
                 "http://labs.metacarta.com/wms/vmap0?", {layers: 'basic'});
 
-            vectors = new OpenLayers.Layer.Vector("Vector Layer");
+            vectors = new OpenLayers.Layer.Vector("Vector Layer", {
+                styleMap: new OpenLayers.StyleMap({
+                    default: new OpenLayers.Style(OpenLayers.Util.extend({label: 'default label'}, 
+                                                                         OpenLayers.Feature.Vector.style["default"]))
+                })
+            });
 
             map.addLayers([wms, vectors]);
             map.addControl(new OpenLayers.Control.MousePosition());
